package tools;

import java.lang.reflect.*;
import java.util.*;

import com.darwinsys.util.Debug;

/** User javac to compile a file and run it iff it compiles OK;
 * this is a time-save as it avoids loading the JVM a
 * second time.
 * <p>
 * Usage: jr [cmd-opts] ClassName [jvm-opts] [arg[...]]
 * <p>
 * Restrictions: does not currently implement e.g. CLASSPATH
 * correctly.
 * <p>
 * You are "not supposed" to call sun.tools.javac directly, since
 * it's not in the public API "java.*". However, it's a big convenience 
 * to be able to specify e.g., an OutputFilterStream for the output
 * (then you can e.g., tee the output).
 * Parts of this code will be superceded by JSR199.
 * <P>
 * @author Ian F. Darwin, http://www.darwinsys.com/
 */
public class jr {

	/** Main - just delegate to non-static methods */
	public static void main(String[] argv) {
		new jr().process(argv);
	}

	private sun.tools.javac.Main compiler;


	/** List of all normal Compile options
	 */
	static opt[] compileOpts = {
			new opt( "-bootclasspath", true ),
			new opt( "-classpath", true ),
			new opt( "-d", true ),
			new opt( "-deprecation", false ),
			new opt( "-encoding", true ),
			new opt( "-extdirs", true ),
			new opt( "-g", false ),		// all one big long string
			new opt( "-nowarn", false ),
			new opt( "-O", false ),
			new opt( "-sourcepath", true ),
			new opt( "-target", true ),
			new opt( "-verbose", false ),
	};

	/** Return an opt that matches the string; null if not found. */
	protected opt findArg(opt[] opts, String s) {
		for (int i=0; i<opts.length; i++)
			if (s.startsWith(opts[i].option))
				return opts[i];
		return null;
	}

	/** List of "java" launcher args. 
	 * XXX we need to act upon some of these.
	 */
	static opt[] runOpts = {
		new opt("-?", false),			// print help
		new opt("-classpath", true),	// path for classes and resources
		new opt("-cp", true),			// ditto
    	new opt("-D", false),			// set a system property
		new opt("-help", false),		// print help
    	new opt("-verbose", false),		// control runtime verbosity
    	new opt("-version", false),		// print program version
		new opt("-X", false),			// help for non-standard options
	};

	/** Do the work of one jr instance. Walk through argv, putting
	 * compile args into compileArgv. First non-compiler-arg should
	 * be java source file. Args after that, if any, are run-time
	 * args, so put them into runtime Argv.
	 */
	protected void process(String argv[]) {
		List compileArgv = new ArrayList();
		String fileName = null;
		List runArgv = new ArrayList();

		// process arguments as described above.
		for (int i=0; i<argv.length; i++) {
			Debug.println("args", "ARGV[" + i + "] == " + argv[i]);
			opt thisOpt = null;
			if (fileName == null) {	// not seen filename yet
				if (argv[i].startsWith("-g") ||
					(thisOpt = findArg(compileOpts, argv[i])) != null) {
						compileArgv.add(argv[i]);
						if (thisOpt != null && thisOpt.takesArg)
							compileArgv.add(argv[1+i++]);
				} else {
					// This is it - we have a filename
					fileName = argv[i];
					compileArgv.add(fileName + ".java");
				}
			} else {
				// post-filename, goes into runtime argv
				runArgv.add(argv[i]);
			}
		}

		System.out.println("compileArgv len " + compileArgv.size());
		System.out.println("filename == " + fileName);
		System.out.println("runArgv len " + runArgv.size());

		// java.Main constructor takes error output file and input filename
		// Write to system.out, not system.err, for ease of redirection in
		// "glorified program loader" environments, like DOS window of MS-Win.
		compiler = new sun.tools.javac.Main(System.out, fileName);

		Object[] cStrings = new String[compileArgv.size()];

		// Try running the compiler
		if (compiler.compile((String[])compileArgv.toArray(cStrings))) {

			System.out.println("Compile OK, trying to run");
			Method m;

			// Must convert run args to String[], then wrap
			// that in Object[] for passing to invoke().
			String[] rStrings = new String[runArgv.size()];
			runArgv.toArray(rStrings);
			Object[] finalArgs = { rStrings };

			// Try running the new program
			try {
				// Fetch the Class object for the just-compiled class
				// (it's probably still in memory).
				Class c = Class.forName(fileName);

				// Now clean up compiler-only stuff.
				System.gc();

				// Get a String Class Array to find main(String[] av)
				Class[] argvType = { String[].class };

				// Now find main(String[] av)
				m = c.getMethod("main", argvType);
				Debug.println("methods", "Found main method: " + m);

			} catch (Exception e) {
				System.out.println("Oops! Caught exception in setup: " + e);
				e.printStackTrace();
				return;
			}

			// Hey, why not invoke it now that we've found it?
			try {
				m.invoke(null, finalArgs);
			} catch (Exception e) {
				System.out.println("Uncaught Exception in main(): " + e);
				e.printStackTrace();
			}
		} else {
			System.out.println("Compile failed, not running");
		}
	}
}

/** Holder for one option */
class opt {
	opt(String o, boolean b) {
		option = o;
		takesArg = b;
	}
	String option;
	boolean takesArg;
}
